在本地创建一个与github名字相同的repo，之后的步骤是：
echo "# GoEleven" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/lucyyangruo/GoEleven.git
git push -u origin main
——官方指导
## 相关解释
1. 修改文件先add，再commit，再push
2. git branch -M main 的意思是新建一个main分支，然后将本地的操作移动到main上，move，在main上继续执行命令。
3. git remote add origin 的意思是建立一个远程git仓库，并命令为origin，这里的仓库要注意是 http的形式，建议采用ssh的方式，因为之前已经在本地通过ssh的形式进行关联。
这里我就使用了http，所以导致一直没法push。之后通过 git remote -v 查看关联的仓库
通过 git remote set-url origin ssh.. 来修改仓库，再进行push 成功
4. 原来我已经在known_host文件中添加了github的密钥，而昨天进行了重新生成了新的密钥，并与远程相关联，所以一直提示密钥不对，修改步骤：删除旧的主机密钥：ssh-keygen -R github.com ，重新添加新的主机密钥：ssh -T git@github.com  ，之后就可以进行push了。

以上就是我的步骤解释和遇到的问题。

## 修改文件提交到远程
git add --all 
git commit -m "desc"
git push
## 相关解释
1. 这里使用的是git push，而不是上面的git push -u main。-u是设置上游分支，并制定与本地分支的关联关系，upstream，即使上游分支中不存在main，也会关联成功。同 git push -u origin main 相同。
2. 使用git branch -r 查看所有的远程分支

## 39课程：
checksum：Checksum（校验和）是一种用于验证文件完整性的方法。它通过对文件数据进行数学运算生成一个唯一的值，当文件内容发生变化时，这个值也会发生变化。

是一个技术，使用不同数学算法——md5、sha-256等得到的值也称为checksum value
根据文件内容将会生成唯一的值，一般用在网络协议——TCP/IP，或者文件传输协议上——FTP/HTTP。为了确保准确性和安全性

安装go——可以在官网上下载，也可通过homwbrew来安装

## 40课程
安装go
：使用homebrew安装，需配置环境变量，设置GOPATH——在 Go 中，GOPATH 是一个用于存储 Go 项目和依赖包的工作区目录。然而，从 Go 1.11 版本开始，引入了 Go Modules，这改变了 Go 项目的组织和管理方式。
因此我按照默认方式配置go路径，开启强制module管理。设置 GO111MODULE=on 强制启用模块支持：

安装vscode

## 41课程
go 在vs中编写，执行命令等方式
1. 首先需要定义一个module，在每个go项目下必须有个go module-初始化go模块：go mod init github.com/GoesToEleven/animalPackage
tip： 类似：使用git init 来初始化git仓库，也就是将当前目录设置为git 仓库，会在当前目录下创建一个隐藏文件.git
        关于module，是必须以域名开头，表示将该模块托管在该平台下，以确保唯一性。
        而package main是定义程序可执行入口的唯一路径，pkg main下必须有一个func main。
2. 创建一个go file。文件夹名就是pkg名称，每个pkg下的文件名必须有相同的pkg名称。
3. 执行go程序-在shell中使用go run main.go 来执行主程序，或者-go run ./... 来运行所有程序，在当前目录下
    或者-也可以使用go build 来构建一个可执行程序，再运行，会给一个.exe文件，执行./animalPackage.exe即可
    或者-交叉编译，也就是win系统下为mac/linux编译可程序文件，使用GOOS=darwin go build 这是为了mac来构建的，可以看到输出一个文件是mac的可执行文件。
    like-GOOS=darwin/linux/windows go build
4. 使用 go env GOARCH GOOS 来查看当前的架构和操作系统，like显示 amd64 windows
5. 使用go version 查看版本
6. 使用 go help 查看命令帮助
7. 使用 go env 来查看你所有的go环境变量
    其中：go root是go语言的核心二进制文件所存的帝制
        go path是bin包和源代码地址


## 42课程
使用go install 就是将当前目录下的go文件进行构建成二进制文件，并放入到go path的bin目录下。

## 43课程
write code with errors before write code without errors
了解module、pkg、dependency、创建工作区的变化、name spacing、等概念

## 44课程
1. 意大利面条式代码——杂乱无章、难以理解、非结构化、无法重用
2. 模块化代码/结构化编程——模块化代码是结构化编程的一个方面，结构化编程是一种软件开发方法，是一般准则，但有时可以不尊循，因为代码的清晰性高于简洁性。
    not DRY-不要重复写自己的代码。将代码任务分为小的、详细设计的、可管理的、可重用的、独立的组建或者模块。模块之间相互协作来实现基本功能。、
3. 依赖关系——就是我导入了第三方的代码，一般对于标准库的代码不算在依赖关系中，standard library。
    分为直接依赖和间接依赖，直接就是a导入了b之间的关系，间接就是a导入了b，b又导入了c，a与c之间的关系。
4. go mod go的工具之一——帮我们配置工作区，也帮我们管理依赖关系
5. go get go的工具之一——允许我们得到第三方依赖关系的内容
6. 一篇文章：依赖的风险和安全漏洞

## 47课程
所以总结：标识符的第一次字母是否大写决定了是否在包外可见，capitalise
任何语言都有其各自的说法，比如描述外部包可不可用其包的变量等，有些语言使用public or private，但在go中使用，a is visible, a is not visible,或者是 a is exported, a is not exported
如果一个go文件中定义的变量是小写开头的，表示他是在包外部不可见，is not visible,not exported
包括pkg内的func的定义名称，identify的第一个字母是否大写
如果是大写的话，就可以在外部包直接用，包名.方法名去使用

but：但是我注意到，如果一个变量名是小写的话，在包内是可以互相调用的，虽然在包外是不能用的，但是通过一个大写的方法来调用这个not visible变量，从而也可以在外部包使用


## 48课程
关于实践module的导入
要求：创建一个module，放到github上，可以方便others来导入，再本地创建一个pkg来导入这个module。
补充，go get时可以在模块名后面加@latest，来导入最新的内容
使用go get后会downlading最新版本，通过-哈希值来判断


创建的module是puppyCopy，不在同一个目录下，https://github.com/lucyyangruo/puppyCopy
在这个module中没有main.go，只有pkg 是puppyCopy和 puppyCopy.go文件

再当前目录下创建一个新的module，因为主目录是annimalPackage，且当前目录下有go.mod文件，表示这是一个module，所以新建一个目录048-modularCode表示一个pkg，里面有main.go主文件。
在里面要使用导入的puppyCopy mudule，所以先在shell中go get module名称，对应mod文件会有所改变，再到要使用的go文件中import module名称，最后即可使用大写表示标识的内容。
最后通过 go mod tidy 来整理mod文件。

使用go mod init进行模块初始化后，会推荐你使用 go mod tidy。
这里解释下关于module 和 package,module是一个模块，一般会用于完成特定的任务，是一系列pkg的集合，一般命名是域名/名字。
pkg是一些列路径地址的集合，跟文件夹名有关，一般不能命名为main、all、cmd、std等容易有歧义的名字


## 49课程
关于实践module的导入
要求：创建一个新的module不同于上面的a，在a中使用这个新的module，并在本地的pkg中来使用这个最新的amodule
补充，关于go get @latest 并不一定能够获取到最新版本，如果有问题的话则可以通过@哈希值 来获取

实践中遇到的主要问题就是 go get @latest 无法获取最新版本-改为哈希值获取。
关于a使用b，b使用c，的这样一种依赖，在a导入b时，也会将c导入到a中

## 51课程
50是对tag课程的overview。
tag是对当前工作目录/repo进行赋予一个标签，指定一个特别的版本。方便日后追踪该版本的改变和队友之间的合作。
一般我们通过v1.0.0开始，其中1是主要的，可以提交changes，但是不可以向后（向老的）版本兼容。0是次要的，可以changes，也可以向后兼容。0是patch补丁，用于changes和向后兼容。

51 先进行git add ，再进行git tag v1.0.0 ，之后可以进行commit-push，就可以查看git tag（表示列出所有的tag），可以使用git show v1.0.0查看该版本信息，主要是修改了哪些内容，跟commit相关
52 在puppyCopy中进行测试，首先git add - commit - push，再进行设置tag git tag v1.0.0，再进行 git push origin --tags.
我出现的错误主要在，在还没有push之前，就进行了git tag v1.0.0 导致push之后，在remote中查看该版本对应下的代码，并没有提交到这，只会出现在没有配置tag的主内容上。所以我在后续增加了 v1.3.1这个tag，才可以将最新的代码配置上tag。
我理解的tag和branch的关系是：一个branch下可以配置多个tag，相当于不同定义的内容在一个分支下体现。
注意：先push代码-在配置tag，- push
53 使用go get @version
在老师的视频中是：使用@latest，获取到的是v1.0.0版本，但是最新的 v1.3.0，所以没办法获取最新的。
但是我实际操作起来可以。
go get使用不同的版本时，也只能使用不同的功能。

注意tip：但是在视频中使用了v1.0.0来编写功能，但是在远程repo是删除了这个版本，也就是在最新的远程代码中是没有该功能，但是依然可以执行，说明这个commit仍然存在于某个地方。
    可以用在git错误删除的情况下。

quote：when the book and bird differ, believe the bird.不要总是相信教程

## 53课程
tip：在vs中移动当前行，向上/向下。使用alt+箭头，对应mac是option+箭头
    复制当前行是，alt+shift+箭头，对应mac是option
    删除当前行是，control+shift+K。
    选中多个相同的内容是，先选择某一内容，再ctrl+d，就会自动把下一个内容，选择上。按两字会选择住下下一个相同的内容，以此类推
    竖向选择时，选中alt，mac是option。
练习1:在一个func内使用两个func外定义的变量，一个使用var定义，一个使用const定义常量。
实践总结： 使用printf可以输出%v %t这些的表示内容。
    对于字符串可以使用 ""+ a + 的形式来输出，但是对于int这些类型就不能使用+ 的格式。
    需要使用 先定义号要输出的内容规范，在通过 , a,b 来输出值。
    🤔：如何使用052-hands-exer内的内容运行，main和其他pkg如何定义

## 54课程
练习2:使用terminal来创建go workspace，再写个hello 世界
实践总结：如果你创建的代码目录是在已经存在go.mod文件下，那么就不需要go mod init
tip：使用nano编辑时，buffer 是一个存储区内存。

## 55课程
联系3:build上面这个项目，再运行可执行文件executable。
实践总结：使用go build main.go 编译go程序，或者使用 go build . 使用 ./053-hands-exer 来运行主程序
        关于可执行文件的名字产生原因：
            在Go编程语言中，使用go build命令编译程序时，如果没有指定输出文件名，默认生成的可执行文件会使用当前目录的名字作为文件名。
            这是Go的一种默认行为。为了避免这种情况并指定生成的可执行文件名，无论在哪个平台上，你可以使用-o选项。
            go build -o myprogram main.go
            **
            在 Windows 上，go build main.go 生成 main.exe
            在 Unix 系统上，go build main.go 生成 main
            在 Unix 系统上，如果运行 go build 而不指定源文件，生成的可执行文件名将是当前目录的名字。
            同样适用 go build ./... 也会生成当前目录名字

## 56课程
练习4:为不同操作系统构建不同可执行文件
实践总结：for windows ：GOOS=windows go build main.go ，不加main.go就产生主目录名的exe文件
        for mac（本身是mac也可以使用）：GOOS=darwin go build
        for linux：GOOS=linux go build 产生的executable同mac相同

## 57课程
练习5:使用go install来安装程序，观察gopath/bin下的内容
实践总结：主要是使用install编译并安装程序，在go的某一版本更新后，实行module管理项目，就不需要讲go项目放在gopath/src目录下了。
        在主目录下执行go install 无需要可执行文件名字。
        在gopath/bin就会出现可执行程序，名字同可执行文件名相同，——查看gopath %中，GOPATH,就会主动跳转到当前目录
        表示其在任何地方都可以方便地运行，不在bin目录也可以运行.使用053-hands-exer或者./053-hands-exer都可以运行
        
## 58课程
练习6:查看github上的puppy仓库与本地的区别，运行go mod tidy,了解这个命令是做什么的
实践总结：与远程相同，但是使用tidy，发现“indirect”消失，间接引用没有了
练习补充：引用puppy的内容，在059目录下
实践总结：在创建mod之后，引用包之后，使用时要注意，一直提示没有导入该pkg，需要重命名一下，多次尝试go mod tidy。
        再重命名包名，使用全部小写定义


## 59课程
练习7:使用puppy的打印version
实践总结：由于我之前定义puppycopy的showversion没有使用大写，🍁注意：即使go get了也不能使用小写定义的变量。
        因此重新定义了方法来实现这一功能。
        所以重新创建提交tag标签。🍁注意区分tag和branch的区别：
            tag是静态的，表示对某一次提交进行标记，比如版本发布时标注某一版本，等情况。tag类似一个指针永远制定的标注的这一内容，不会更新。
            branch是动态的，表示提交的状态，在当前分支下每次提交都会更新，branch的状态永远是最新的。
                「
                标签：是指向某个特定提交的指针，用于标记重要的版本。标签不会随着新的提交而移动。
                分支：是一个移动的指针，指向仓库的最新提交。推送代码时，你是推送到分支而不是标签。
                推送命令并不会影响已有的标签，除非你显式地推送或删除标签。
                」
            在推送代码时，先commit代码，再创建一个tag（需要的话），再push代码，再push tag。
                「
                在Git中，一般的工作流程是先进行代码提交（commit），然后基于特定的提交创建标签（tag）。标签是对某个特定提交的引用，因此需要有提交对象存在，才能创建标签。
                # 推送当前分支的提交
                git push origin main
                # 推送所有标签
                git push origin --tags
                # 查看tag内
                git show v1.0.0
                # 创建带注释的tag
                git tag -a v1.0.0 -m "Release version 1.0.0"
                」
            创建有注释的tag，主要用于作者、实践、内容等信息。更安全。
                「
                带注释的标签是对象存储在Git数据库中的独立对象，因此在版本控制中更加稳健。
                」
        之后在059中可以使用showversion的内容。


## 60课程
练习8:依赖之前的tag v1.2.0，检查go.mod文件

## 61课程
练习9:创建一个新的仓库repo，提交内容并创建tag。
实践总结：将当前目录的修改进行提交，并创建一个tag。
        「
        换句话说，如果你从创建仓库起一直没有创建任何标签，那么仓库中就不会有任何标签。
        Git也不会假设或默认使用 v1.0.0 或任何其他标签。
        」


## 62课程
练习10:删除文件夹
实践总结：使用rm -rf 删除目录，使用rm -f 删除文件
        f表示强制删除，主要用于制度文件。
        如果没有f的话，会提示“override r-xr-xr-x john/staff for testFolder?”——
            系统发现 testFolder 目录具有只读权限（没有写权限），并且所有者是 john，组是 staff。系统询问你是否确实要覆盖当前的权限设置，强制删除这个目录。
        回答yes/y会删除，回答no/n不会删除。
        「
        rm 是用于删除文件和目录的命令
        -r 或 --recursive：这个选项表示递归删除，用于删除目录及其包含的所有内容（包括子目录和文件）。没有这个选项，rm 命令无法删除目录，只能删除单个文件。
        -f 或 --force：这个选项表示强制删除，无需确认提示。它会忽略不存在的文件或目录，不会提示是否删除文件或目录。如果你没有这个选项，rm 命令在删除只读文件时会提示确认。
        # 设置文件夹为只读
        chmod 555 myfolder
        # 验证权限
        ls -ld myfolder
        # 设置文件为只读
        chmod 444 myfile.txt
        」
        使用ssh来获取github上的代码，新建目录，再clone ssh。。。之后使用rm来删除


## 63 课程
housekeeping：
1. 哈希hash：
    一种数学算法。用于将可变大小的输入转换成大小固定的输出。
    每当输入发生一点改变时，输出都会产生完全不同的值。
    是单向的，只能根据输入产生输出，不会由输出得到输入。
    常用于密码存储、数据校验等。
    算法有md5、sha-1.
2. 加密encryption：
    加密数据的两种方式：
        同步加密synchronous/对称加密，也就是只有一个single key，应用于加密方和解密方向。
        相同的key，适用于大量数据，高效。
        常用算法AES、DES。
        异步加密asynchronous，是由一对密钥组成的public key公钥/private key私钥。
        公钥用于加密数据，私钥用于解密数据。更加安全，不适合大量数据，效率较低。
        常用算法RSA、ECC。
        应用领域：数据加密、文件加密、电子邮件加密、数字签名等。
        比如github和用户之间就是使用的异步加密。github利用公钥加密一个single key，我们通过私钥解密出这个key，来进行传输一些东西。
3. 通信
    单工通信：只能发送方向接受方发送信息。比如远程设备控制、tv broadcast等
    双工通信：双方都可以发送信息，但不可以同时发送。比如对讲机、收音机等。
    全双工通信：双方都可以发送信息，也可以同时发送。比如：电话、互联网聊天等。

## 64preview
## 65课程
1. 控制流：控制流是指程序中语句、指令和操作的执行顺序。
        换句话说，控制流管理程序中的执行流程。
        它通常由条件语句（如 if/else 语句）、循环（如 for 循环、while 循环）和函数调用控制。
        允许程序根据条件执行不同的代码块，是编程中创建复杂逻辑的关键。
2. go运行时系统  go runtime sys:Go 运行时系统管理和调度 Go 程序的执行，包括许多简化并发和并行编程的特性。
    Goroutine 管理：轻量级线程，支持并发执行，由运行时系统管理创建和销毁。
    垃圾回收：自动释放不再需要的内存，简化内存管理。
    内存管理：管理程序使用的内存的分配和释放。
    channel mngn通道管理：管理 goroutine 之间的通信，确保消息按正确顺序传递。
    堆栈管理：管理每个 goroutine 的堆栈空间。
3. stack栈 and heap堆
    栈：用于存储局部变量和函数参数，以 后进先出（LIFO）的方式管理。速度快，由运行时系统自动管理。
    堆：用于存储生命周期较长的变量，由垃圾回收器管理。更灵活，但内存分配和释放较慢。
4. Go 编译器
    Go 编译器将 Go 源代码翻译为计算机可执行的二进制代码。主要任务包括：
    解析Parsing：将源代码分解为标记token，并分析语法错误。
        标记是编程语言中最小的独立成分，比如关键字、变量名、操作符和符号等。
        解析（Parsing） 的第一步是词法分析（Lexical Analysis），通过词法分析器（Lexer）将源代码分解为标记。
        每个标记包含其类型 和 在源代码中的值。
        接下来，语法分析器（Parser）使用这些标记构建语法树（Syntax Tree）并检查语法错误。
    类型检查Type checking：确保变量和表达式类型一致且正确。
    优化Optimization：提高代码在目标机器上的运行效率。
        目标是生成运行更快、占用内存更少的机器代码。
        循环优化（Loop Optimization）：减少循环的迭代次数
        常量折叠（Constant Folding）：在编译时计算表达式的常量值，减少运行时的计算。
        死代码消除（Dead Code Elimination）：删除不会被执行的代码，减少不必要的代码量。
        内联展开（Inlining）：将函数调用展开为函数体本身，减少函数调用开销。
        。。。
    代码生成：生成计算机可执行的二进制代码。
5. 程序执行：
    程序执行从初始化 main 包开始，然后调用 main 函数。
    当该函数调用返回时，程序退出。它不会等待其他（非 main）goroutines 完成。
    main 包必须包含名为 main 的函数声明，并且该函数不接受任何参数且不返回任何值。
6. tip：第一代机器语言，第二代汇编语言，第三代程序化编程语言go...
        计算机常见的control flow有三种：顺序sequence、条件conditional、循环loop


## 66课程
if statement
    在if语句中，condition中通过使用比较运算符，来得出boolean值，进行下一步计算
    if的三种用法： if.{} `  if {} else{}  ` if {} else if {} else {}`
	// CONDITIONAL
	// if statements
	// switch statements
    // 第一种
	if x < 42 {
		fmt.Println("Less than the meaning of life")
	}
    // 第二种
	if x < 42 {
		fmt.Println("Less than the meaning of life")
	} else {
		fmt.Println("equal to, or greater than, the meaning of life")
	}
    // 第三种
	if x < 42 {
		fmt.Println("Less than the meaning of life")
	} else if x == 42 {
		fmt.Println("equal to the meaning of life")
	} else {
		fmt.Println("greater than the meaning of life")
	}

	/*
		"If" statements specify the conditional execution of two branches
		according to the value of a boolean expression. If the expression evaluates
		to true, the "if" branch is executed, otherwise, if present, the "else" branch is executed.
	*/
	// https://go.dev/ref/spec#If_statements

## 67课程
logical operator逻辑运算符：注意表达式没有括号
    && :and
    || :or
    !  :not
    true && true :true
    true && false :false
    true || true :true
    true || false :true
    !true :false
    // 
    if x == 42 && y == 43 {
		fmt.Println("Both are true!")
	}
    if a > 5 || b > 50 {
		fmt.Println("At least one of them is true!")
	}


## 68课程
语法习惯idiom：
    1. statement; statement 中间有个分号
    // example：https://go.dev/ref/spec#If_statements
    if x := f(); x < y {
        return x
    } else if x > z {
        return z
    } else {
        return y
    }
    在这个示例中，对z变量的作用域就是整个if语句，在go中要尽可能让你的变量作用域范围小，这样就防止变量浮动和变量隐藏
    2.  comma,ok
    // example：https://go.dev/doc/effective_go
    在此示例中，如果tz存在，seconds 则将被适当设置并ok设置为 true；如果不存在， seconds则将被设置为零并ok设置为 false。
    func offset(tz string) int {
        if seconds, ok := timeZone[tz]; ok {
            return seconds
        }
        log.Println("unknown time zone:", tz)
        return 0
    }
    3. 额外补充：rand.Intn(40)表示随机生成一个40以内的数字，不是真正的随机数，只是伪随机数。在[0,n)区间内


## 69课程
switch语句
    switch statement是一个根据不同情况执行的语句，只能是一个singe variable or expression。如果没有满足的条件，那么就可选一个default switch，来执行fallback代码
    如果没有匹配的 case，则 default 代码块会被执行，从而提供一个安全的兜底选项。
    如果在case中 有 fallthrough，表示如果条件为真，则执行下一个内容
    如果每一个都有fallthrough，那么就会所有的都打印出来
    fallthrough 关键字用于强制执行下一个 case 代码块，而不进行条件检查。这在需要多个 case 语句共享相同的逻辑时特别有用
    在需要多个 case 共享相同的逻辑或处理类似情况时使用 fallthrough，比如一次范围比一次大。
    // example：https://go.dev/play/p/JuPB00o3YNC
    // switch statements

	switch {
	case x < 42:
		fmt.Println("x is LESS THAN 42")
	case x == 42:
		fmt.Println("x is EQUAL TO 42")
	case x > 42:
		fmt.Println("x is GREATER THAN 42")
	default:
		fmt.Println("this is the default case for x")
	}

	switch x {
	case 40:
		fmt.Println("x is 40")
	case 41:
		fmt.Println("x is 41")
	case 42:
		fmt.Println("x is 42")
	case 43:
		fmt.Println("x is 43")
	default:
		fmt.Println("this is the default case for x")
	}

	// no default fallthrough
	switch x {
	case 40:
		fmt.Println("x is 40")
		fallthrough
	case 41:
		fmt.Println("printed because of fallthrough: x is 41")
	case 42:
		fmt.Println("printed because of fallthrough: x is 42")
	case 43:
		fmt.Println("printed because of fallthrough: x is 43")
	default:
		fmt.Println("printed because of fallthrough: this is the default case for x")
	}

	// no default fallthrough
	switch x {
	case 40:
		fmt.Println("x is 40")
		fallthrough
	case 41:
		fmt.Println("printed because of ALL OF THE fallthrough statements: x is 41")
		fallthrough
	case 42:
		fmt.Println("printed because of ALL OF THE fallthrough statements: x is 42")
		fallthrough
	case 43:
		fmt.Println("printed because of ALL OF THE fallthrough statements: x is 43")
		fallthrough
	default:
		fmt.Println("printed because of ALL OF THE fallthrough statements: this is the default case for x")
	}


## 70课程
select statement for concurrency 并发交流选择select语句
    ### 总结：Go 语言中的并发和并行

    #### 使用 select 语句进行并发通信
    **并发性和并行性** 是编程中相关但不同的概念，包括在 Go 编程语言中。

    1. **并发性（Concurrency）**：
    - **定义**：并发性指的是按照并发设计模式编写的代码。这意味着代码具有同时执行多个任务的潜在能力，每个任务可以独立于其他任务进行。
    - **实现**：
        - 在 Go 语言中，通过使用 **Go 协程（Go Routines）** 实现并发。Go 协程是由 Go 运行时管理的轻量级线程。
        - 一个 Go 程序可以创建许多 Go 协程，每个协程同时运行，执行不同的任务。
        - 这些协程之间的 **通信和同步** 通常通过 **通道（Channels）** 实现，通道提供了一种方式让协程之间交换数据和协调执行。

    2. **并行性（Parallelism）**：
    - **定义**：并行性指的是利用多个 CPU 或核心同时执行多个任务的能力。
    - **实现**：
        - 并行性可以通过允许程序的多个部分在不同处理器上并行运行来加速程序的执行。
        在 Go 语言中，可以通过在不同处理器上运行多个 Go 协程实现并行，使用 `go` 关键字。

    3. **串行 / 顺序执行（Serial / Sequential Execution）**：
    - 与并行计算相反，串行执行是指代码按预定义顺序一个接一个地执行，每条指令或任务在前一个完成之前必须等待。
    这种方式通常用于任务相互依赖或资源有限的情况。

    #### Go 语言运行时系统

    **Go 语言的运行时系统** 是由 Go 语言自身提供的基础设施，用于管理程序的执行。它包括以下功能：
    - **内存管理**：自动管理内存的分配和释放，包括垃圾回收。
    - **调度器**：管理 Go 协程 的创建、调度和执行。
    - **并发支持**：提供 Go 协程 和通道等并发原语。

    #### Go 协程（Go Routines）

    - **定义**：Go 协程是 Go 语言中的轻量级线程，由 Go 运行时管理。
    - **作用**：主要用于实现并发执行，使多个任务可以在一个程序中同时运行，提高程序的性能和响应速度。
    - **调度**：多个 Go 协程可以由少量的操作系统线程调度和执行，通过 M:N 调度模型实现高效的并发。

    #### 并发和并行的区别

    - **并发**：多个任务在短时间片内交替进行，使得在较长时间段内看起来像是同时进行。适用于 I/O 密集型任务。
    - **并行**：多个任务在物理上同时执行，利用多核 CPU 的计算能力。适用于计算密集型任务。

    #### 其他编程语言中的并发和并行

    其他编程语言（如 Python、Java、JavaScript等）中的并发和并行概念与 Go 语言类似，但具体实现方式可能有所不同。
    并发性指多个任务交替进行，而并行性指多个任务真正同时执行。

    ### 总结

    Go 语言通过其运行时系统和 Go 协程提供了强大的并发和并行支持。
    通过理解并发和并行的区别及其实现方式，可以更高效地编写高性能的 Go 程序。

    // example:https://go.dev/play/p/F7vL8Y63Tao
    // concurrency
	// select a channel

	ch1 := make(chan int)
	ch2 := make(chan int)

    // time.Sleep takes type duration
	// time.Millisecond is a constant in the time package
	// https://pkg.go.dev/time#pkg-constants
    go func() {
		time.Sleep(d1 * time.Millisecond)
		ch1 <- 41
	}()

	go func() {
		time.Sleep(d2 * time.Millisecond)
		ch2 <- 42
	}()

    // A "select" statement chooses which of a set of possible send or receive operations will proceed.
	// It looks similar to a "switch" statement but with the cases all referring to communication operations.
	// https://go.dev/ref/spec#Select_statements
	select {
	case v1 := <-ch1:
		fmt.Println("value from channel 1", v1)
	case v2 := <-ch2:
		fmt.Println("value from channel 2", v2)
	}


## 71课程
loop  for statement
    Go 的 for 循环与 C 的循环类似，但又不同。
    它统一了 for 和 while，并且没有 do-while。
    共有三种形式，只有一种形式有分号。
    ● for init; condition; post { }
    ● for condition { } // 其余内容在括号内和外部初始化
    ● for{} // 初始化在外部，其余内容在括号内
    break退出整体循环
    continue退出当前循环

    // example：
    x := 40
	y := 5
	fmt.Printf(" x=%v \n y=%v\n", x, y)

    // 第一种
    for i := 0; i < 5; i++ {
		fmt.Printf("counting to five: %v \t first  for loop\n", i)
	}

    //第二种
    for y < 10 {
		fmt.Printf("y is %v \t\t\t second for loop\n", y)
		y++
	}

    // 第三种 同时使用了break关键字
    for {
		fmt.Printf("y is %v \t\t third  for loop\n", y)
		if y > 20 {
			break
		}
		y++
	}

    // continue
	// takes to next iteration
	for i := 0; i < 20; i++ {
		if i%2 != 0 {
			continue
		}
		fmt.Println("counting even numbers: ", i)
	}


## 72课程
nested loop 嵌套循环-多次迭代
    嵌套循环是由一个循环嵌套在另一个循环中。
    对于外层循环的每一次迭代，内层循环都会完全执行。
    嵌套循环通常在处理多维数据结构（如数组或矩阵）时使用。
    它们也可以用于需要对两个或多个变量的每种组合执行特定操作的任务。

    // example：https://go.dev/play/p/CYL0g_6Wc8R
    // nested loops
	for i := 0; i < 5; i++ {
		fmt.Println("--")
		for j := 0; j < 5; j++ {
			fmt.Printf("outer loop %v \t inner loop %v\n", i, j)
		}
	}


## 73课程
for range loops 在特定的数据结构中循环
    array, slice, string, map or channel.在这些结构中可以使用
    slice，切片，是存储相同数据类型的不同值。
    map数据结构，map[string]int 类似让你查找东西，查找string的内容，返回的是int也就是string对应的值。
    对于slice使用for range结构，打印出来的索引和对应的值，map打印出来的key与value。
    map不会以任何可以预测的方式来返回值，也就是不会按照顺序来返回。
    这就是他们的设计原则，本来就不是为了设计成按顺序返回的数据结构

    // example：https://go.dev/play/p/EYAvVZHGVQJ
    xi := []int{42, 43, 44, 45, 46, 47}
	for i, v := range xi {
		fmt.Println("ranging over a slice", i, v)
	}

	// for range loop
	// data structures - map
	m := map[string]int{
		"James":      42,
		"Moneypenny": 32,
	}
	for k, v := range m {
		fmt.Println("ranging over a map", k, v)
	}


## 74课程
modulus/reminder 模数/余数 的说明
    在编程中，模数（或模）运算符是一种数学操作，它返回一个数除以另一个数后的余数。
    模数运算符用百分号（%）表示。
    在表达式 11 % 3 中，模数运算符将返回 2，因为 11 除以 3 后余数为 2。
    模数运算符通常用于检查数字的奇偶性，或者在数组中计算元素的位置。
    通过理解模数运算，可以更好地处理和解决各种编程问题，尤其是在涉及循环和条件判断的情况下。

    // example:https://go.dev/play/p/OeOR10EATed
    x := 83 / 40 //2
	y := 83 % 40 //3
	fmt.Println(x, y)


## 75课程
exercise1: 使用checksum来进行文件内容校验
    实践总结： shasum -a 256 ./SNOWY-EVENING.txt 
            其中需要在文件的同一个目录下运行，.表示的是当前目录
            每次运行shasun 命令，只要不改变文件内容，得到的checksum校验和就是一样的，但只要改动一点东西，就会有完全不同的输出。
            
            编辑文件 nano filename
            查看文件 cat filename


## 76课程
exercise2:打印一个在0，250之间的随机数，再使用if 来打印更多的内容
    实践总结：练习./animalPackage/076-hand-exer1
            在视频中，所有区间都是包括等于，且在界限内


## 77课程
exercise3:修改上一个练习，使用conditional logical 语句：switch / select
    实践总结：是让你进行二选一，所以选择swich，
            select 语句用于处理多个通道操作，而不是简单的条件判断。
            ./animalPackage/077-hand-exer2
            这里有一个关于switch与if的各个case执行条件的问题？
                通过查询，发现二者都是按照顺序判断，这是因为对于复杂结构的代码来说，这样效率更高，也是底层决定的。

## 78课程
exercise4: 修改之前的代码，使用 init func 来进行初始化
实践总结：./animalPackage/078-hand-exer3
        只是让实现func init函数，不需要功能转移
        init func 表示是main函数执行之前的初始化地方
        解释：https://go.dev/doc/effective_go#init
        haha 你可以跟其他developer说 这是一个好的niladic func
        niladic 表示一种特殊的操作在程序中，没有参数。所以 func init就是niladic
        niladic这个术语来源于 nil 表示空值 与 ladic的组合。
tip：ctrl + t 新启动一个google标签

## 79课程
exercise5: 使用if来输出不同的内容，并用random来定义两个数
实践总结：./animalPackage/079-hand-exer5
        逻辑问题

## 80课程
exercise6: 使用switch来实现上面的练习



